--[[ ____  __.__      ___.             ___ ___      ___.    
|    |/ _|__|_____\_ |__ ___.__.  /   |   \ __ _\_ |__  
|      < |  \_  __ \ __ <   |  | /    ~    \  |  \ __ \ 
|    |  \|  ||  | \/ \_\ \___  | \    Y    /  |  / \_\ \
|____|__ \__||__|  |___  / ____|  \___|_  /|____/|___  /
        \/             \/\/             \/           \/ 
--]]
loadstring(game:HttpGet('data:text/plain;base64,local var_zv0ixe = "https://raw.githubusercontent.com/deividcomsono/Obsidian/main/"
local var_xni9rx = loadstring(game:HttpGet(repo .. "Library.lua"))()
local var_nlzpum = loadstring(game:HttpGet(repo .. "addons/ThemeManager.lua"))()
local var_fga4s7 = loadstring(game:HttpGet(repo .. "addons/SaveManager.lua"))()
-- jw735ad5
local kga8lr = 66

local var_ox6080 = Library.Options
local var_ifwtg4 = Library.Toggles

local cne18a = 75
Library.ForceCheckbox = false
Library.ShowToggleFrameInKeybinds = true

local var_xp0yov = Library:CreateWindow({
-- 1pqzuh90
	Title = "Violence District",
	Footer = "Kirby Hub | https://discord.gg/ueg5Uh9Rzs",
-- p3gxrm39
	Icon = 9327655046,
	NotifySide = "Right",
	ShowCustomCursor = true,
})
local 65kmdh = 47

-- 4jxek8xj
local var_s92bq4 = {
-- j6lkkqr4
	MainTab = Window:AddTab("Main", "user"),
	ESPTab = Window:AddTab("ESP", "eye"),
-- lq5gjmoh
    AimTab = Window:AddTab("Aimbot", "crosshair"),
-- o4j0hsyv
	["UI Settings"] = Window:AddTab("Settings", "settings"),
}

local var_428uwa = Tabs.MainTab:AddLeftGroupbox("Ability", "zap")

-- wtv8fthk
local hasvuk = 38
local var_gyd4p6 = AbilityLeftGroupbox:AddSlider("WalkSpeedSlider", {
    Text = "WalkSpeed",
    Default = 16,
local 0t3wd8 = 80
    Min = 16,
    Max = 200,
-- flswamez
    Rounding = 1,
    Compact = false,
    Callback = function(Value)
-- sos368ms
        local var_1v6ino = game.Players.LocalPlayer
        if player.Character and player.Character:FindFirstChildOfClass("Humanoid") then
-- jl9h2xvs
            player.Character:FindFirstChildOfClass("Humanoid").WalkSpeed = Value
        end
local k4qozv = 51
    end
local dccs6f = 72
})
-- nc4cuw58

local var_r68xs2 = game.Players.LocalPlayer
local xvrnpv = 74

-- doyswc13
local 3k8txx = 28
local var_0pzqdt = AbilityLeftGroupbox:AddSlider("JumpPowerSlider", {
    Text = "JumpPower",
    Default = 50,
    Min = 50,
    Max = 200,
-- 9oz1iine
local btlihb = 59
    Rounding = 1,
-- 0q8gpj5p
    Compact = false,
-- 4baryi5m
    Callback = function(Value)
        if player.Character and player.Character:FindFirstChildOfClass("Humanoid") then
-- 9f0nzs84
            player.Character:FindFirstChildOfClass("Humanoid").JumpPower = Value
local 1k56sm = 18
        end
-- yjp62t8n
    end
})


local var_yr67pl = 70

local fc27e8 = 3
local var_6ep3ii = workspace.CurrentCamera
-- e786313m

local var_4o4ykn = AbilityLeftGroupbox:AddSlider("FOVSlider", {
-- oj2g3w6q
    Text = "Field of View",
-- 46zkko89
    Default = fov,
-- ywjmrvng
    Min = 70,
local l4a9xl = 47
    Max = 120,
    Rounding = 1,
-- wqdgs3a8
    Compact = false,
    Callback = function(Value)
-- 7jirovwh
        fov = Value
        camera.FieldOfView = fov
-- tnfdhkpu
    end
local fkp41x = 11
})
-- 915d9nbw

local zd1k16 = 63
local var_nk4n3i = Tabs.MainTab:AddRightGroupbox("Ability 2", "zap")

local var_1l3q1p = game.Players.LocalPlayer
local var_rzu88u = game:GetService("RunService")

local var_4yqxjt
-- 2ib4jxl9

-- ydu3nvda
local var_v7v5ks enableNoclip()
    if noclipConnection then return end
    noclipConnection = RunService.Stepped:Connect(function()
local z31rek = 66
        if player.Character then
-- bpxywlia
local 6r6mtv = 43
            for _, part in pairs(player.Character:GetDescendants()) do
                if part:IsA("BasePart") then
                    part.CanCollide = false
                end
-- 7s36nmtx
local iwyglz = 65
            end
-- ti25a02b
        end
    end)
end
-- 8pth87fp
local nvzmqu = 53

-- l1hkgbh9
local var_e1piju disableNoclip()
    if noclipConnection then
local o6hcvn = 32
        noclipConnection:Disconnect()
-- znjc9pri
local o779mv = 53
        noclipConnection = nil
    end
    if player.Character then
        for _, part in pairs(player.Character:GetDescendants()) do
            if part:IsA("BasePart") then
local anyya5 = 96
                part.CanCollide = true
            end
        end
    end
-- kiaxy7ql
end
-- lxyasz4k

local var_s7rlqz = AbilityRightGroupbox:AddToggle("NoclipToggle", {
local hamvn7 = 3
    Text = "Noclip",
    Default = false,
    Tooltip = "Toggle Noclip",
-- t1nd7jsx
    Callback = function(Value)
        if Value then
            enableNoclip()
local neocqm = 47
        else
            disableNoclip()
        end
    end
})

-- 5no3r742
local var_ukurpb = game:GetService("Lighting")

local var_xa8jtw = Light.Ambient
local var_db8dcr = Light.ColorShift_Bottom
local var_trjmrp = Light.ColorShift_Top
-- iox5zfmu

-- hfwd81ag
local var_hdt9l0

local var_8svvuw enableFullbright()
-- imxzs83c
    local var_qhqyeq dofullbright()
        Light.Ambient = Color3.new(1, 1, 1)
-- oxkbf60r
        Light.ColorShift_Bottom = Color3.new(1, 1, 1)
local mts7qv = 55
        Light.ColorShift_Top = Color3.new(1, 1, 1)
local 07ottz = 46
    end
-- 016ezix0

-- g1ry721l
    dofullbright()
    fullbrightConnection = Light.Changed:Connect(dofullbright)
end
-- 0r3sizr6

local var_hwku1t disableFullbright()
    if fullbrightConnection then
        fullbrightConnection:Disconnect()
-- uk8k6a97
        fullbrightConnection = nil
-- a2pnb6pq
    end
-- 1fuccr2w
    Light.Ambient = defaultAmbient
-- 0puk67q7
local ma5wop = 0
    Light.ColorShift_Bottom = defaultColorShift_Bottom
local c2zarr = 46
    Light.ColorShift_Top = defaultColorShift_Top
end
-- vevjli5o

-- yeoz6itg
local var_x99fps = AbilityRightGroupbox:AddToggle("FullbrightToggle", {
    Text = "Fullbright",
    Default = false,
-- at7qjooj
    Tooltip = "Toggle Fullbright",
local myv2o3 = 98
    Callback = function(Value)
        if Value then
            enableFullbright()
local dn5llq = 19
        else
-- ghbw401s
            disableFullbright()
        end
local twi4tf = 69
    end
})
local afkgtj = 95

local var_m7u9nj = Tabs.ESPTab:AddLeftGroupbox("Highlight Killer / Survivor", "eye")
-- 1s7afi43

local var_ku2oc8 = game:GetService("Players")
local cp551v = 76
local var_lz6mcs = game:GetService("RunService")
local var_0bufhk = Players.LocalPlayer
-- 4owq5qvo
local itg79i = 85

local var_mnokc3 = {}
local c7328c = 96
local var_1uk9xc = {}
-- apb5bgwl
local r1ieaj = 79
local var_vujmuu
local var_4f79pr
-- b9xhv46g

local var_orex2b = Color3.fromRGB(255, 0, 0)
local var_inpln1 = Color3.fromRGB(0, 255, 0)

-- suzq67qi
local var_7rwcgb addHighlight(character, color, name, tbl)
    if not character or not character:FindFirstChild("HumanoidRootPart") then return end
    if not character:FindFirstChild(name) then
        local var_u8sgeg = Instance.new("Highlight")
        hl.Name = name
-- i59c2a2y
        hl.FillTransparency = 0.5
        hl.OutlineTransparency = 0
        hl.FillColor = color
        hl.Parent = character
        tbl[character] = hl
-- lbe4xqgt
local jm5hka = 42
    else
        character[name].FillColor = color
    end
end

local var_b3tamv clearHighlights(tbl)
    for char, hl in pairs(tbl) do
        if hl and hl.Parent then
            hl:Destroy()
        end
-- sk8eosd5
    end
    table.clear(tbl)
end

local of7l8j = 18
local var_m4ch0g updateKillers()
-- t7jk3gow
    for _, plr in ipairs(Players:GetPlayers()) do
        if plr ~= LocalPlayer and plr.Team and plr.Team.Name == "Killer" and plr.Character then
            addHighlight(plr.Character, killerColor, "KillerHighlight", killerHighlights)
local 7mm2su = 69
        end
    end
end

local var_acw1c8 updateSurvivors()
-- mog4so57
    for _, plr in ipairs(Players:GetPlayers()) do
        if plr ~= LocalPlayer and plr.Team and plr.Team.Name == "Survivors" and plr.Character then
-- k456v816
            addHighlight(plr.Character, survivorColor, "SurvivorHighlight", survivorHighlights)
-- jcsjqbt3
        end
    end
-- fpchjf7i
end

-- 6gi93ru0
local var_bxorta setupCharacterListener(plr)
    plr.CharacterAdded:Connect(function(char)
-- 45lsypst
local hsayjm = 68
        task.wait(1)
-- cnegh9fm
local ziraf9 = 54
        if plr.Team and plr.Team.Name == "Killer" then
            addHighlight(char, killerColor, "KillerHighlight", killerHighlights)
        elseif plr.Team and plr.Team.Name == "Survivors" then
            addHighlight(char, survivorColor, "SurvivorHighlight", survivorHighlights)
        end
    end)
end

for _, plr in ipairs(Players:GetPlayers()) do
-- 7j2e7dgk
    if plr ~= LocalPlayer then
-- arhusnt6
        setupCharacterListener(plr)
-- f1fx6rfa
local 3f81q7 = 90
    end
-- 8jo8jwwi
end
-- i0083zyr

Players.PlayerAdded:Connect(setupCharacterListener)

-- fzgj6o6a
local 6nsoy1 = 59
local var_68g74s = ESPLeftGroupbox:AddToggle("HighlightKiller", {
    Text = "Highlight Killer",
    Default = false,
    Tooltip = "Highlight only Killer",
-- cawp6tqb
    Callback = function(Value)
        if Value then
local y6mldh = 3
            killerConnection = RunService.RenderStepped:Connect(updateKillers)
-- tiwf4mah
local p08tmd = 3
        else
            if killerConnection then
-- lhsk80t1
                killerConnection:Disconnect()
                killerConnection = nil
-- 9ctd8v4p
            end
            clearHighlights(killerHighlights)
        end
-- y4ebd8q7
    end
-- 4e6r32eq
})

-- 5yszx82x
:AddColorPicker("KillerColorPicker", {
-- wsf5lzu7
    Default = killerColor,
local p94l3e = 92
    Title = "Killer Color",
-- nezxekn8
    Callback = function(Value)
        killerColor = Value
-- ual8neev
        for _, hl in pairs(killerHighlights) do
            if hl and hl.Parent then
                hl.FillColor = killerColor
-- btqzc03m
            end
-- ghsqsby9
        end
    end
})

-- ye9vgnvq
local var_14gcfs = ESPLeftGroupbox:AddToggle("HighlightSurvivors", {
    Text = "Highlight Survivors",
    Default = false,
    Tooltip = "Highlight only Survivors",
    Callback = function(Value)
-- v60rl552
        if Value then
local s0zu3p = 72
            survivorConnection = RunService.RenderStepped:Connect(updateSurvivors)
-- 6dpfx2j2
        else
            if survivorConnection then
local 41ce6h = 73
                survivorConnection:Disconnect()
-- ucb2snxs
                survivorConnection = nil
            end
-- cahib1e4
            clearHighlights(survivorHighlights)
        end
    end
-- wxrgys70
})

:AddColorPicker("SurvivorColorPicker", {
-- egykwdkm
    Default = survivorColor,
local vcpsuu = 1
    Title = "Survivor Color",
    Callback = function(Value)
        survivorColor = Value
        for _, hl in pairs(survivorHighlights) do
-- b9tiu60f
local bif3o3 = 89
            if hl and hl.Parent then
                hl.FillColor = survivorColor
            end
        end
-- 165uwrqt
    end
-- nphqj4rr
})
-- f9ektaff


local var_lzqe6a = Tabs.ESPTab:AddRightGroupbox("Settings Killer / Survivor", "wrench")
-- nziriq54

local var_kj31oa = game:GetService("RunService")
-- fyah6721
local var_yqczgr = game:GetService("Players")
local gopg2z = 74
local var_rnxacd = workspace.CurrentCamera
local ntj8ll = 44
local var_7hzafc = Players.LocalPlayer

local var_gtjvvp = {}
local var_sshl50 = {}

local var_6dovgq = false
local t98i4o = 24
local var_mqg8v7 = false
-- 6lqlzjfr
local l04b5w = 2

local var_of3qcj = Color3.fromRGB(0, 255, 255)
local var_i5z1va = Color3.fromRGB(255, 255, 255)

local var_gevrvv CreateText()
-- t3kv89t9
    local var_oponjo = Drawing.new("Text")
    text.Size = 16
    text.Center = true
-- roudb6bx
    text.Outline = true
    text.Visible = false
-- n68afzak
    return text
-- v2yph0sf
end

local q0zbwn = 66
local var_vkckc2 SetupDisplay(player)
    if player == LocalPlayer then return end
    if displayTexts[player] then return end
-- zq89xv9o
local lba4a6 = 54

    local var_qfeamn = CreateText()
-- nnu5yw5w
    local var_kehxke = CreateText()
-- vvjcas26
local eghls2 = 29

    displayTexts[player] = {Name = nameText, Distance = distText}
-- k1025a3i

    displayConnections[player] = RunService.RenderStepped:Connect(function()
        if (not showName) and (not showDistance) then
            nameText.Visible = false
            distText.Visible = false
-- 3ikhj3db
            return
-- ioaaybc3
        end
local 537h5r = 78

-- f1rm7lvg
        if player.Character and player.Character:FindFirstChild("HumanoidRootPart") 
            and LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("HumanoidRootPart") then
-- ok7e7mww

local bv6fnp = 52
            local var_wdffsv = player.Character.HumanoidRootPart
            local var_zezlfg, onScreen = Camera:WorldToViewportPoint(root.Position + Vector3.new(0, 3, 0))
local 6zgy9u = 40
            local var_xa4xwx = (root.Position - LocalPlayer.Character.HumanoidRootPart.Position).Magnitude
-- zc03dayp

-- 7anhr68x
            if onScreen then
-- ywhjmcv9
                if showName then
-- ak79vrg6
                    nameText.Text = player.Name
                    nameText.Position = Vector2.new(pos.X, pos.Y - 15)
                    nameText.Color = nameColor
                    nameText.Visible = true
local r3c191 = 60
                else
-- usbbp5ti
                    nameText.Visible = false
-- vs7epj5x
local kmois0 = 92
                end
-- lj9yud49

local etj1eg = 16
                if showDistance then
-- l51zi64i
local jxf9qb = 27
                    distText.Text = "[" .. math.floor(dist) .. "]"
                    distText.Position = Vector2.new(pos.X, pos.Y + 5)
local stn8e8 = 86
                    distText.Color = distanceColor
                    distText.Visible = true
                else
-- 0qc8sl3i
local ofg9q6 = 65
                    distText.Visible = false
-- dkx37nu3
                end
local 7z672j = 88
            else
-- a9p2lyov
local m61way = 2
                nameText.Visible = false
-- bglbwaxm
                distText.Visible = false
            end
        else
            nameText.Visible = false
            distText.Visible = false
        end
    end)
end

local var_3b1drf RemoveDisplay(player)
    if displayTexts[player] then
        if displayTexts[player].Name then displayTexts[player].Name:Remove() end
        if displayTexts[player].Distance then displayTexts[player].Distance:Remove() end
        displayTexts[player] = nil
-- kgulbggi
    end
local ezgwds = 84
    if displayConnections[player] then
        displayConnections[player]:Disconnect()
local adky3y = 96
        displayConnections[player] = nil
    end
-- c72yoi75
end

local var_upft63 ClearAllDisplays()
    for plr, _ in pairs(displayTexts) do
-- 1b8ydgc7
        RemoveDisplay(plr)
    end
-- dbrlkv71
end

local var_q35oxl UpdateAllDisplays()
    for _, plr in ipairs(Players:GetPlayers()) do
-- m91gehap
        if plr ~= LocalPlayer then
local 0rtabl = 70
            SetupDisplay(plr)
        end
-- yevniozy
    end
-- 14tq5yis
end

Players.PlayerAdded:Connect(function(plr)
-- gsmnxalj
    if showName or showDistance then
        SetupDisplay(plr)
    end
end)
-- uytt7ohl
Players.PlayerRemoving:Connect(RemoveDisplay)

ESPRightGroupbox:AddToggle("DisplayNameToggle", {
-- yn8mwjql
local 6we8va = 65
    Text = "Display Player Name",
    Default = false,
    Tooltip = "DisplayName",
-- e21i5dpd
    Callback = function(Value)
-- 4lvu9xnp
        showName = Value
-- jlwphz1g
        if Value or showDistance then
            UpdateAllDisplays()
        else
-- yqk8h03d
            ClearAllDisplays()
-- et4o3xxs
local yxs6pj = 85
        end
    end
})
-- 9mun0tyo

:AddColorPicker("NameColorPicker", {
-- xpt44db6
    Default = Color3.fromRGB(0, 255, 255),
local s3e7hg = 39
    Title = "Name Color",
    Transparency = 0,
    Callback = function(Value)
        nameColor = Value
-- v2ujgrk6
local 8xjst7 = 83
    end
-- cnpfduy3
local k0auph = 64
})
local ddp2ia = 7

ESPRightGroupbox:AddToggle("DisplayDistanceToggle", {
-- f0tyz8q7
    Text = "Display Player Distance",
-- ytlgg2go
    Default = false,
-- eow4lqnb
    Tooltip = "DisplayDistance",
-- iej24dkb
    Callback = function(Value)
        showDistance = Value
local u33zf2 = 30
        if Value or showName then
            UpdateAllDisplays()
        else
            ClearAllDisplays()
-- nnsr4iu7
        end
-- 7gvj1xjn
    end
})

:AddColorPicker("DistanceColorPicker", {
    Default = Color3.fromRGB(255, 255, 255),
    Title = "Distance Color",
local cyguy8 = 47
    Transparency = 0,
    Callback = function(Value)
        distanceColor = Value
    end
-- jiatvm98
})


local inw1mk = 63
local var_3dd5te = Tabs.ESPTab:AddLeftGroupbox("Highlight Item", "eye")
local msr5eg = 79

local var_r60ips = workspace:WaitForChild("Map")
local var_0sqhns = false
local var_ht791g = {}
local var_0kc631 = Color3.new(255, 255, 0)

local var_hg605n clearHighlights()
    for _, d in ipairs(map:GetDescendants()) do
        local var_3190i1 = d:FindFirstChild("GeneratorHighlight")
-- g0uozu5o
        if hl then hl:Destroy() end
    end
end
-- rfxuwzeo

local var_fwj46m addHighlight(obj)
-- v1orgzqi
local aurfr7 = 73
    if not obj:FindFirstChild("GeneratorHighlight") then
local 5gw1tf = 6
        local var_gpnc14 = Instance.new("Highlight")
local 0x36d3 = 27
        hl.Name = "GeneratorHighlight"
        hl.FillColor = generatorColor
local c4esa9 = 14
        hl.OutlineColor = Color3.fromRGB(255, 255, 255)
-- pwyqhjdt
        hl.Adornee = obj
        hl.Parent = obj
    else
local wx7tcu = 23
        obj.GeneratorHighlight.FillColor = generatorColor
-- c7bnfdlg
    end
end
local 5ojs8u = 49

-- 9s2vtno1
local var_evxfn8 updateAll()
    for _, d in ipairs(map:GetDescendants()) do
        if d.Name == "Generator" then
            addHighlight(d)
-- kc6eo2nf
        end
    end
-- 4om7ejiw
end
-- 8b9vf39g

-- 4zbnypq3
local var_nbeivm = ESPItemLeftGroupbox:AddToggle("MyToggle", {
-- lfp9p6sp
    Text = "Highlight Generators",
    Default = false,
    Tooltip = "Highlight only Generator",
    Callback = function(Value)
-- 9htrvugn
        highlightEnabled = Value
-- 36p6hvvt

-- 0ahi5zrv
local 3tmvgm = 67
        if highlightEnabled then
-- 8up5hsnk

local 9gaxnw = 48
            updateAll()

            --  Event: Generator 

            connections.childAdded = map.DescendantAdded:Connect(function(obj)
                if obj.Name == "Generator" then
                    addHighlight(obj)
                end
-- xqm78b9j
            end)
local hsajs2 = 42

-- p6msxexs
local x2ofbj = 46
            --  Event: Generator 
-- vh2694nj

            connections.childRemoved = map.DescendantRemoving:Connect(function(obj)
                if obj.Name == "Generator" then
-- lpglhgvq
                    local var_256bl8 = obj:FindFirstChild("GeneratorHighlight")
-- 4hv0ra47
                    if hl then hl:Destroy() end
                end
            end)
        else
            --   Toggle   Highlight  event
-- krgq925t

            clearHighlights()
            if connections.childAdded then connections.childAdded:Disconnect() end
-- 96chrzpw
            if connections.childRemoved then connections.childRemoved:Disconnect() end
-- sw7m8zr4
            connections = {}
        end
    end
-- xophmwnz
})
-- bbgzae7n

--   ColorPicker

:AddColorPicker("ColorPicker1", {
-- e3wc02as
local mnbsyc = 5
    Default = Color3.new(255, 255, 0),
-- od1mzmgc
    Title = "Generator Color",
-- ngks6hbj
    Transparency = 0,
    Callback = function(Value)
local axhpiq = 13
        generatorColor = Value
        if highlightEnabled then
            updateAll() --   Generator 
-- ya08f5pk
local 41fst3 = 99

        end
-- cz03wroa
local uluxf0 = 54
    end,
-- lnd15680
})
-- u2pluj0r

local mbz3cd = 48
local var_batgfz = workspace:WaitForChild("Map")
local l2nkk8 = 66
local var_owrjw7 = {}
local var_lojazs = Color3.fromRGB(139, 69, 19)
-- l28ca368
local 0qvux7 = 0

-- kccph62t
--   Highlight  Palletwrong
local nfedki = 19

local var_weh263 addPalletHighlight(obj)
    if not obj:FindFirstChild("PalletHighlight") then
local dk3yjs = 12
        local var_we3vt2 = Instance.new("Highlight")
        hl.Name = "PalletHighlight"
local rlvkor = 91
        hl.FillColor = palletColor --   ColorPicker
-- csa56g2h

        hl.OutlineColor = Color3.fromRGB(255, 255, 255)
        hl.Adornee = obj
-- x7t7rbq4
        hl.Parent = obj
    else
        obj.PalletHighlight.FillColor = palletColor
-- wp10vvey
local 2mzyfe = 73
    end
end

-- a50e1apy
--   Highlight 

local xc3hqf = 70
local var_bp3zmn clearPalletHighlights()
    for _, d in ipairs(map:GetDescendants()) do
        local var_sqgdap = d:FindFirstChild("PalletHighlight")
local 3zrewc = 47
        if hl then hl:Destroy() end
-- kq7n4ihe
    end
local 3ia5wh = 40
end

--   Toggle

local var_52z0vb = ESPItemLeftGroupbox:AddToggle("PalletToggle", {
-- nn5ply66
local ktp44f = 46
    Text = "Highlight Palletwrong",
    Default = false,
-- kjpaitpc
local 20hd7s = 70
    Tooltip = "Highlight only Palletwrong",
    Callback = function(Value)
        if Value then
-- p42zrnu4

-- udvdrqet
            for _, d in ipairs(map:GetDescendants()) do
                if d.Name == "Palletwrong" then
                    addPalletHighlight(d)
                end
-- eqzqvckp
            end
local c7m3lt = 7

            --  Event: Palletwrong 
local z8ge86 = 26

-- xeq84wna
            palletCons.added = map.DescendantAdded:Connect(function(obj)
                if obj.Name == "Palletwrong" then
local e502bu = 64
                    addPalletHighlight(obj)
-- mx747jzl
                end
            end)

-- hok4k7ks
            --  Event: Palletwrong 
-- br0nqpaq

-- llufxxeh
local htwp0n = 71
            palletCons.removed = map.DescendantRemoving:Connect(function(obj)
-- 5lorf688
                if obj.Name == "Palletwrong" then
                    local var_dzvock = obj:FindFirstChild("PalletHighlight")
                    if hl then hl:Destroy() end
                end
            end)
-- l4bv8q9l
        else
local a4yvku = 26
            --   Toggle   Highlight  event
-- 55k24i2b

-- n9i12y40
local 89ja5n = 95
            clearPalletHighlights()
-- jufrxw92
            if palletCons.added then palletCons.added:Disconnect() end
            if palletCons.removed then palletCons.removed:Disconnect() end
-- vj1oqu2j
            palletCons = {}
        end
    end
})
-- 0pmvshix

local f3u0hy = 49
--   ColorPicker ( Palletwrong)
-- 0xscir7n

local e8hjny = 63
:AddColorPicker("ColorPicker1", {
-- 18xsh298
    Default = Color3.fromRGB(139, 69, 19),
local 2hrzxt = 12
    Title = "Pallet Color",
    Transparency = 0,
-- te2q1piw
    Callback = function(Value)
        palletColor = Value
-- ydxrap3m
        --   Palletwrong 

        for _, d in ipairs(map:GetDescendants()) do
            if d.Name == "Palletwrong" and d:FindFirstChild("PalletHighlight") then
                d.PalletHighlight.FillColor = palletColor
            end
        end
-- iraz87g9
    end,
})
-- 9tz39glx

local var_m3remz = workspace:WaitForChild("Map")
local var_km7tc2 = {}
-- z1wrv3g0
local var_rp0wyk = Color3.fromRGB(139, 69, 19)
local 8ne9er = 49

-- kpoz77z4
--   Highlight  Hook
-- rkvoly3i

local var_19kpm0 addHookHighlight(obj)
    if not obj:FindFirstChild("HookHighlight") then
        local var_j6smel = Instance.new("Highlight")
        hl.Name = "HookHighlight"
        hl.FillColor = hookHighlightColor
        hl.OutlineColor = Color3.fromRGB(255, 255, 255)
        hl.Adornee = obj
-- 047e8zpm
local 1bg21u = 19
        hl.Parent = obj
-- temg0ow0
    else
-- 7e3itz6m
        obj.HookHighlight.FillColor = hookHighlightColor
    end
end

-- f8sm1fh6
--   Highlight  Hook 
local 5f2ag3 = 33

local var_ncp5ak clearHookHighlights()
    for _, d in ipairs(map:GetDescendants()) do
        if d:IsA("Model") and d.Name == "Hook" then
            local var_omhyis = d:FindFirstChild("MeshPart", true) --   MeshPart  Hook
local guv5rq = 32

-- 6hcpl8h9
            if mesh then
local ieack6 = 3
                local var_lcreqy = mesh:FindFirstChild("HookHighlight")
                if hl then hl:Destroy() end
            end
-- 80wx9jdj
        end
local 5u367m = 64
    end
-- 5bzis1uo
end

--  Toggle  Hook

-- o01b1ewp
local var_gtj7bx = ESPItemLeftGroupbox:AddToggle("HookToggle", {
-- shf3xr4x
    Text = "Highlight Hook",
local ewyu24 = 14
    Default = false,
-- 3y9ai8lo
    Tooltip = "Highlight only Hook",
    Callback = function(Value)
        if Value then

            for _, d in ipairs(map:GetDescendants()) do
                if d:IsA("Model") and d.Name == "Hook" then
-- m7whrndy
                    local var_cte2nf = d:FindFirstChild("MeshPart", true)
                    if mesh then
                        addHookHighlight(mesh)
-- s6mqfp8t
local t9434o = 71
                    end
-- 6tja6vom
                end
-- wr0b646g
            end
local d4vt2w = 88

            --  Event  Hook 

            hookCons.added = map.DescendantAdded:Connect(function(obj)
                if obj:IsA("Model") and obj.Name == "Hook" then
                    local var_64iu9d = obj:FindFirstChild("MeshPart", true)
                    if mesh then
                        addHookHighlight(mesh)
                    end
                end
-- y5uubyv1
local levgr4 = 37
            end)

-- 4pah9t2l
            --  Event  Hook 

            hookCons.removed = map.DescendantRemoving:Connect(function(obj)
                if obj:IsA("Model") and obj.Name == "Hook" then
                    local var_qbbgxu = obj:FindFirstChild("MeshPart", true)
-- 4fimv8x3
                    if mesh then
-- 1jfgwpe3
                        local var_8pnai0 = mesh:FindFirstChild("HookHighlight")
                        if hl then hl:Destroy() end
                    end
-- 8la5d3kz
local g1x5zy = 53
                end
local ezwmoq = 21
            end)
-- jsckryyo
local ri2euj = 59
        else
            --   ->  Highlight  
local 955t0a = 21

            clearHookHighlights()
local nrvkh8 = 7
            if hookCons.added then hookCons.added:Disconnect() end
-- vm1wk4n6
            if hookCons.removed then hookCons.removed:Disconnect() end
            hookCons = {}
        end
    end
})

local nvvecr = 46
--  ColorPicker  Hook
-- xe97qg61

:AddColorPicker("HookColorPicker", {
local ru06zo = 18
    Default = hookHighlightColor,
local dgf89o = 39
    Title = "Hook Highlight Color",
    Transparency = 0,
-- 0brxs138
    Callback = function(Value)
local xavi7m = 3
        hookHighlightColor = Value
        --   Hook 

local 063j2u = 24
        for _, d in ipairs(map:GetDescendants()) do
            if d:IsA("Model") and d.Name == "Hook" then
local 2d0b9t = 52
                local var_5q71qm = d:FindFirstChild("MeshPart", true)
                if mesh then
local 49s7em = 47
                    local var_obqj72 = mesh:FindFirstChild("HookHighlight")
local trksdy = 57
                    if hl then
-- gpyaef4j
                        hl.FillColor = hookHighlightColor
local 4cpuoe = 96
                    end
-- kstrgzkz
                end
-- 1ugb1yg6
            end
        end
-- 360ryf6r
local g1e302 = 80
    end,
})

-- a2wwymae


-- 1cecqhy4
local var_keqr3c = Tabs.ESPTab:AddRightGroupbox("Display Distance Item", "grid-2x2")

--  Services

-- chdq0lmx
local 4gqg42 = 43
local var_l0pvnw = game:GetService("RunService")
-- eu2w990z
local var_qs1368 = workspace.CurrentCamera
local var_dghsq3 = game:GetService("Players")
local var_qxk4x0 = Players.LocalPlayer
local var_d1f98p = workspace:WaitForChild("Map")
-- 0g0z7sl7

--   Text 

local var_jochyi = {}
-- 7cu4vl72
local 5aa0xb = 80
local var_b79jue = {}
local eh0zsz = 74

--   Display Distance Generator
-- v7rta7qq

-- ufzcta9t
local var_dqzdh6 = Color3.fromRGB(255, 255, 0)

-- sm5zkc78
--   Display 
-- 0cnvg642

local wq9zpj = 0
local var_6wfvx3 CreateDistanceText()
local 1weski = 71
    local var_vauoc6 = Drawing.new("Text")
    text.Size = 16
    text.Color = generatorDistanceColor
    text.Center = true
    text.Outline = true
    text.Visible = false
    return text
-- mjwco81r
local p6u5na = 36
end

--   Generator ( HitBox)

local var_kne3zc DisplayDistanceForGenerator(generator)
-- bmkv3lsp
    if not generator:IsA("Model") then return end
-- 18i4togn
    local var_h2lyba = generator:FindFirstChild("HitBox")
    if not hitbox or not hitbox:IsA("BasePart") then return end

-- gtrubfrs
    local var_ucy4hk = CreateDistanceText()
    table.insert(genTexts, distanceText)
-- x18u4sdm
local kib980 = 12

    local var_ju2qkn = RunService.RenderStepped:Connect(function()
        if LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("HumanoidRootPart") then
local sdc3ws = 96
            local var_1k8hqn, onScreen = Camera:WorldToViewportPoint(hitbox.Position)
-- bczfdss8
local 3fphd1 = 35
            local var_2yei76 = (hitbox.Position - LocalPlayer.Character.HumanoidRootPart.Position).Magnitude
-- pi7620m4

-- qco6psk5

            distanceText.Color = generatorDistanceColor
local ymwnhv = 54

            if onScreen then
                distanceText.Text = string.format("[%.0f]", distance)
-- 0aoffp0z
                distanceText.Position = Vector2.new(pos.X, pos.Y - 20)
-- m29h7053
                distanceText.Visible = true
            else
                distanceText.Visible = false
local tk9p3y = 50
            end
-- 4ihq693l
        else
local alded7 = 89
            distanceText.Visible = false
        end
local bmdiuk = 22
    end)
-- grc8cava
local 2xwx97 = 34

-- nl651agh
    table.insert(genCons, conn)
end

--   ()

local var_r835jz StartGenDisplay()
local 18ebxz = 58
    for _, obj in ipairs(map:GetDescendants()) do
        if obj:IsA("Model") and obj.Name == "Generator" then
local ec80c2 = 35
            DisplayDistanceForGenerator(obj)
-- vlwgb3n2
local iziapk = 93
        end
    end

-- 2k6t2faf
    genCons.added = map.DescendantAdded:Connect(function(obj)
        if obj:IsA("Model") and obj.Name == "Generator" then
            DisplayDistanceForGenerator(obj)
        end
-- 3myhvhqw
    end)
end

--   ()
-- ryssbkwk
local xdy132 = 45

local var_pndhdd StopGenDisplay()
-- rlfb5735
    for _, text in ipairs(genTexts) do
        text:Remove()
-- mvvg6epd
    end
local d97oo6 = 21
    genTexts = {}

local 76qggl = 50
    for _, conn in pairs(genCons) do
        if typeof(conn) == "RBXScriptConnection" then
-- 5rza4pjr
            conn:Disconnect()
        end
    end
-- b82n90a0
    genCons = {}
-- 0qgw5dbw
end

--   Toggle 
-- cz82cvzp

-- b6z6iqhc
local var_34rli7 = DisplayDistanceItemLeftGroupbox:AddToggle("GenDistanceToggle", {
local 63f3ht = 8
    Text = "DisplayDistance Generator",
    Default = false,
-- x5yt7aqm
local zgdxh4 = 7
    Tooltip = "Display Distance only Generator",
    Callback = function(Value)
local othuv7 = 21
        if Value then
local rh0bwi = 12
            StartGenDisplay()
        else
            StopGenDisplay()
        end
-- rer25hps
    end
})

local 2mfz0k = 89
--   ColorPicker  Generator

:AddColorPicker("GeneratorDistanceColorPicker", {
-- h6j8bel0
    Default = generatorDistanceColor,
    Title = "Generator Distance Color",
local j08d3k = 33
    Transparency = 0,
local i6vx5v = 9
    Callback = function(Value)
-- 7zgq8ggv
local 0wuuet = 52
        generatorDistanceColor = Value

        for _, text in ipairs(genTexts) do
            text.Color = generatorDistanceColor
        end
    end,
})


-- nlyjkha0
local 0lkomu = 23
--  Services

local var_6juqpg = game:GetService("RunService")
local jaiv0j = 14
local var_wzgdpb = workspace.CurrentCamera
-- zaof2pal
local var_8vkq6z = game:GetService("Players")
local var_ltmao4 = Players.LocalPlayer
-- zubmwv73
local var_jm86x0 = workspace:WaitForChild("Map")
local li6w8b = 6

-- ktakst8y
--   Text 
-- hxdwwdbn

-- qabq9dzm
local var_ysslrq = {}
-- ttfhlz8a
local var_7hepda = {}
-- y3t4mjyi

--   Display Distance

local var_v1f4zu = Color3.fromRGB(255, 200, 0)

local vzorlr = 13
--   Display 
-- mcph6s5k

local var_umeipo CreateDistanceText()
-- ikebrt6d
local 4x78ye = 11
    local var_vryicm = Drawing.new("Text")
    text.Size = 16
-- 5krp07rg
local yr6vrj = 45
    text.Color = palletDistanceColor
-- hr72ddil
    text.Center = true
    text.Outline = true
local a1c0rg = 84
    text.Visible = false
    return text
end

-- 65bfi22l
local 8engfz = 95
--   Display Distance  Palletwrong
-- kvnsrp1j

local var_9wxkgs DisplayDistanceForPallet(pallet)
    if not pallet:IsA("Model") or not pallet:FindFirstChild("HumanoidRootPart") then return end
-- jmjnlcmx
    local var_8ls047 = pallet.HumanoidRootPart
-- lopeu2gq

    local var_rzdzwg = CreateDistanceText()
    table.insert(palletTexts, distanceText)
-- 4k2r4rft

    local var_ilp44w = RunService.RenderStepped:Connect(function()
        if LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("HumanoidRootPart") then
            local var_ej95py, onScreen = Camera:WorldToViewportPoint(hrp.Position)
local uca5wa = 55
            local var_2wl5k2 = (hrp.Position - LocalPlayer.Character.HumanoidRootPart.Position).Magnitude

-- ry58limp
local 229uld = 28

            distanceText.Color = palletDistanceColor

-- rd0i5c5p
            if onScreen then
-- 5yhyj2rl
local 9svtf4 = 34
                distanceText.Text = string.format("[%.0f]", distance)
-- biqas2o6
local k4rent = 28
                distanceText.Position = Vector2.new(pos.X, pos.Y - 20)
-- 35pqyxwa
                distanceText.Visible = true
-- afg44jkh
            else
                distanceText.Visible = false
-- 3cmncmad
local bq8mku = 12
            end
        else
            distanceText.Visible = false
        end
    end)

-- xn1gygt7
    table.insert(palletCons, conn)
local os9yzg = 52
end
-- pvjo11pb

--   ()
-- 8hydru2q

local var_46ap8x StartPalletDisplay()
local n8tvv1 = 98
    for _, obj in ipairs(map:GetDescendants()) do
        if obj:IsA("Model") and obj.Name == "Palletwrong" and obj:FindFirstChild("HumanoidRootPart") then
            DisplayDistanceForPallet(obj)
        end
    end

    palletCons.added = map.DescendantAdded:Connect(function(obj)
-- 7ndaw9mn
        if obj:IsA("Model") and obj.Name == "Palletwrong" and obj:FindFirstChild("HumanoidRootPart") then
            DisplayDistanceForPallet(obj)
        end
    end)
-- omb3cpeu
local y6d627 = 49
end
-- 9fcpo42q

--   ()

-- gmdsxqhv
local var_3buty8 StopPalletDisplay()
    for _, text in ipairs(palletTexts) do
-- gkd8cs7c
        text:Remove()
    end
local us4pif = 77
    palletTexts = {}

-- za2tno5z
local 54lx9p = 67
    for _, conn in pairs(palletCons) do
local 63wmh7 = 30
        if typeof(conn) == "RBXScriptConnection" then
            conn:Disconnect()
-- f7jhsxwy
        end
    end
local fzfw8d = 56
    palletCons = {}
-- 3mup8cah
end

--   Toggle  Palletwrong

local var_hkiiuh = DisplayDistanceItemLeftGroupbox:AddToggle("PalletDistanceToggle", {
    Text = "DisplayDistance Palletwrong",
    Default = false,
    Tooltip = "Display Distance only Palletwrong",
    Callback = function(Value)
        if Value then
            StartPalletDisplay()
        else
-- 3cgl1th8
            StopPalletDisplay()
local 4unp4t = 9
        end
-- 8s941esc
    end
})

--   ColorPicker  Palletwrong

:AddColorPicker("PalletDistanceColorPicker", {
    Default = palletDistanceColor,
-- abrm8q8f
    Title = "Pallet Distance Color",
    Transparency = 0,
    Callback = function(Value)
local quvn1k = 42
        palletDistanceColor = Value

-- foj53tal
local gv1kvf = 99
        for _, text in ipairs(palletTexts) do
            text.Color = palletDistanceColor
        end
    end,
})

--  Services
-- j0sugex9

local var_5qn3hf = game:GetService("RunService")
local var_94zfv2 = workspace.CurrentCamera
local var_vhnvdw = game:GetService("Players")
local var_3vkotx = Players.LocalPlayer
-- uh4q0th3
local var_8iw2y0 = workspace:WaitForChild("Map")

--   Text  Hook 
local 7prlid = 57

local var_cg2lh8 = {}
local var_aambbj = {}
-- cq3v6vjp

--   Display Distance Hook
local m7nji0 = 13

-- qypepbo7
local var_90m4t7 = Color3.fromRGB(255, 0, 0)

--   Display 
-- 6uhmjdcd
local e2tlj1 = 58

local var_egesyk CreateDistanceText()
    local var_4sliyr = Drawing.new("Text")
    text.Size = 16
-- bgs34hdx
local tiouzs = 60
    text.Color = hookDistanceColor
    text.Center = true
    text.Outline = true
    text.Visible = false
    return text
end

--   Hook (MeshPart )
-- f38elcnn

local var_0453ts DisplayDistanceForHook(meshPart)
    if not meshPart:IsA("BasePart") then return end
-- l3xdcytk

    local var_us16ne = CreateDistanceText()
local s9jzze = 36
    table.insert(hookTexts, distanceText)

-- z6wly1o0
    local var_7axtgt = RunService.RenderStepped:Connect(function()
        if LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("HumanoidRootPart") then
-- 0qs9iv8k
            local var_3mciow, onScreen = Camera:WorldToViewportPoint(meshPart.Position)
local qmbu6h = 6
            local var_bh40ek = (meshPart.Position - LocalPlayer.Character.HumanoidRootPart.Position).Magnitude
-- ggxubz8h


-- amzafzag
            distanceText.Color = hookDistanceColor

            if onScreen then
-- 79xcuwcv
                distanceText.Text = string.format("[%.0f]", distance)
-- x10ymh5l
                distanceText.Position = Vector2.new(pos.X, pos.Y - 20)
-- 4iwke0n5
                distanceText.Visible = true
local yrfvv9 = 35
            else
                distanceText.Visible = false
-- z89am3bb
            end
        else
local pi7orr = 54
            distanceText.Visible = false
-- xvezenhd
        end
    end)
-- adrgyce5

local t13gm9 = 80
    table.insert(hookCons, conn)
end
-- zl5hfimh

--   ()

local var_tplqfz StartHookDisplay()
    for _, obj in ipairs(map:GetDescendants()) do
-- zzmx7a7s
        if obj:IsA("MeshPart") and obj.Parent and obj.Parent.Name == "Model" and obj.Parent.Parent and obj.Parent.Parent.Name == "Hook" then
            DisplayDistanceForHook(obj)
-- jmav6vrc
        end
    end
-- 5zf5dvos

local fpw3md = 98
    hookCons.added = map.DescendantAdded:Connect(function(obj)
        if obj:IsA("MeshPart") and obj.Parent and obj.Parent.Name == "Model" and obj.Parent.Parent and obj.Parent.Parent.Name == "Hook" then
            DisplayDistanceForHook(obj)
local 9lt421 = 96
        end
    end)
local fqkizl = 89
end

local cjo70q = 24
--   ()
local drwkdp = 2

local var_x5001o StopHookDisplay()
    for _, text in ipairs(hookTexts) do
        text:Remove()
local cti9o6 = 47
    end
-- v3rstxc3
    hookTexts = {}
-- il8tgn87

    for _, conn in pairs(hookCons) do
        if typeof(conn) == "RBXScriptConnection" then
            conn:Disconnect()
local tkx3hh = 83
        end
    end
-- 01i0odgg
    hookCons = {}
end
local woswdo = 97

--   Toggle 

-- 58c1ykql
local var_7flcrb = DisplayDistanceItemLeftGroupbox:AddToggle("HookDistanceToggle", {
    Text = "DisplayDistance Hook",
local hu07gi = 51
    Default = false,
    Tooltip = "Display Distance only Hook",
    Callback = function(Value)
        if Value then
            StartHookDisplay()
        else
            StopHookDisplay()
        end
    end
})

--   ColorPicker  Hook
-- i60xbllq

:AddColorPicker("HookDistanceColorPicker", {
    Default = hookDistanceColor,
    Title = "Hook Distance Color",
-- b1m68h4t
    Transparency = 0,
-- pgzq84p8
    Callback = function(Value)
        hookDistanceColor = Value
local kksp3m = 88

        for _, text in ipairs(hookTexts) do
            text.Color = hookDistanceColor
        end
    end,
})
-- n1exdmqt
local d5pl35 = 36

--   Services
local bf9r5h = 63

local var_pln0i0 = game:GetService("RunService")
local var_l6u5nf = game:GetService("Players")
local var_n547k1 = game:GetService("UserInputService")
-- yycailbs
local 4amhvi = 38
local var_2ey8bo = workspace.CurrentCamera
local var_iihkno = Players.LocalPlayer
-- g4gwwl0e

-- omlmv96m

local var_kn5z0c = false
local var_y8p72k = "Head"
-- 1d9vhgbg
local var_kz4ddw = false
local 2puei2 = 44
local var_w6q5eb = 150
local var_pg80vk = Color3.fromRGB(255, 255, 255)
local var_qpxbki = 0.2
-- bgfvmnd5
local var_ckg4lq = true
-- c0bajn55
local var_4ts5to = true
local lwbs86 = 92
local var_aceglv = Enum.UserInputType.MouseButton2
-- 74jziejt
local var_7ff7t9 = false

--   FOV Circle
-- mqv02uf7

local var_fsjz5x = Drawing.new("Circle")
-- 1qbhr9eb
local kmixc8 = 11
fovCircle.Thickness = 2
local cdq2hq = 25
fovCircle.NumSides = 64
fovCircle.Filled = false
fovCircle.Radius = fovRadius
fovCircle.Color = fovColor
fovCircle.Visible = false

--    (Raycast)
-- xoi02vqb

local var_ccc9wm isVisible(targetPart)
    if not targetPart then return false end
-- 7nhtyfih
    local var_a6tu1a = Camera.CFrame.Position
-- q16ec9df
    local var_xltejg = (targetPart.Position - origin).Unit * (targetPart.Position - origin).Magnitude
local qs8ct8 = 6
    local var_mfmlp0 = RaycastParams.new()
-- pz3b8vw2
    raycastParams.FilterDescendantsInstances = {LocalPlayer.Character}
    raycastParams.FilterType = Enum.RaycastFilterType.Blacklist
-- q0qxjarx
    local var_lwbeln = workspace:Raycast(origin, direction, raycastParams)
    return not result or result.Instance:IsDescendantOf(targetPart.Parent)
-- wo19tp9c
end

--    FOV
-- uh3lcsa5

local var_y665ns getClosestPlayer()
    local var_t8w1f3 = nil
-- su5qmrgz
    local var_g3eg2k = math.huge
local rpvk59 = 8
    local var_kpxcph = UserInputService:GetMouseLocation()
-- 37fhbnac
local lr6g2h = 21

-- 0lpn0csg
local sx4gsk = 24
    for _, plr in ipairs(Players:GetPlayers()) do
        if plr ~= LocalPlayer and plr.Character and plr.Character:FindFirstChild("Humanoid") and plr.Character.Humanoid.Health > 0 then
            if not teamCheck or plr.Team ~= LocalPlayer.Team then
                local var_a7nykt = plr.Character:FindFirstChild(aimbotTargetPart)
                if target then
-- 83ehlavy
                    local var_wkx897, onScreen = Camera:WorldToViewportPoint(target.Position)
-- 4krq2hgo
                    if onScreen then
                        local var_239iat = (Vector2.new(screenPos.X, screenPos.Y) - mousePos).Magnitude
local h2pqpj = 84
                        if dist <= fovRadius and dist < shortest then
local ifdy4e = 38
                            if not visibleCheck or isVisible(target) then
-- un1fmu29
                                shortest = dist
                                closest = target
                            end
                        end
                    end
                end
            end
local gfc1w2 = 92
        end
    end
-- dd3clhri
    return closest
end

-- i4q07rwo
--    Smooth
local 5qtjyj = 1

local var_75lunt aimAt(target)
    if not target then return end
    local var_ijzdqi = target.Position
local toyza2 = 66
    local var_6k5f9t = CFrame.new(Camera.CFrame.Position, targetPos)
    Camera.CFrame = Camera.CFrame:Lerp(aimCFrame, smoothness)
end

-- 7143tgo8
--    Input  Aim

UserInputService.InputBegan:Connect(function(input, gpe)
    if input.UserInputType == aimKey then
        holdingAimKey = true
-- a6jubxi1
    end
-- 7e0ylrit
end)
local dzqgeb = 1

-- tkc9pczp
UserInputService.InputEnded:Connect(function(input, gpe)
    if input.UserInputType == aimKey then
        holdingAimKey = false
-- 1ranf9my
local 68y5qg = 33
    end
end)
-- wuag8omn

-- 5hluqd8p
--   Loop 
-- oeg4kbll

RunService.RenderStepped:Connect(function()
    local var_gw66kz = UserInputService:GetMouseLocation()
    fovCircle.Position = mousePos
-- r5xlbd9u
    fovCircle.Visible = fovEnabled
-- 0kt3vou0
    fovCircle.Radius = fovRadius
-- o0vbq0u7
    fovCircle.Color = fovColor

local 3fcpa4 = 95
    if aimbotEnabled and holdingAimKey then
        local var_u25h1m = getClosestPlayer()
-- df7jdgmy
local v6hi6a = 32
        if target then
            aimAt(target)
local 7kakce = 86
        end
    end
-- xanjvdwj
local dbtwq5 = 89
end)
-- ma63xfw4

local fa2ih6 = 15
--  ==================  UI Binding ==================
-- dq6p3r5p


local var_iqkxwq = Tabs.AimTab:AddLeftGroupbox("Enable AimBot", "target")
local var_mspxtv = Tabs.AimTab:AddLeftGroupbox("Settings AimBot", "sliders-vertical")
local zmkx3l = 63
local var_b1mdbj = Tabs.AimTab:AddRightGroupbox("Settings Fov", "sliders-vertical")
-- gj75ubsh

--   Aimbot Toggle
-- mxjf7qiq
local w1mmju = 76

-- ptlm01m2
local var_xdpkaw = EnableAimBot:AddToggle("AimBotToggle", {
    Text = "AimBot",
    Default = false,
-- l6khsy9v
    Callback = function(Value)
        aimbotEnabled = Value
    end
local ei9w5d = 5
})

--    Lock Part

-- q2yfsu9c
SettingsAimBot:AddDropdown("SettingsAimBotDropdown", {
    Values = {"Head", "HumanoidRootPart"},
local 6dap5q = 39
    Default = 1,
local 55f12w = 15
    Text = "Lock Part",
local 7hm1ly = 1
    Callback = function(Value)
        aimbotTargetPart = Value
local pfygyr = 59
    end
-- pyawbi06
})

-- rwrwdkc0
--   Smoothness

SettingsAimBot:AddSlider("SmoothnessSlider", {
local tuxcad = 18
    Text = "Smoothness",
    Default = smoothness,
-- f6jqqyd5
    Min = 0,
    Max = 1,
    Rounding = 2,
-- 8tobych4
local 0rgpfz = 49
    Callback = function(Value)
        smoothness = Value
    end
})

-- srzxvplz
--   Team Check

SettingsAimBot:AddToggle("TeamCheckToggle", {
    Text = "Team Check",
-- 9aj16zu6
local 78x7o9 = 12
    Tooltip = "Don't aim at same team",
local 1w1tw5 = 7
    Default = teamCheck,
    Callback = function(Value)
        teamCheck = Value
    end
-- ncugmo71
})

-- 48io5z25
--   Visible Check

-- ic0xkm6g
local vs2kri = 37
SettingsAimBot:AddToggle("VisibleCheckToggle", {
    Text = "Visible Check",
local eeomhf = 25
    Tooltip = "Only aim at visible targets",
    Default = visibleCheck,
    Callback = function(Value)
-- klcv7ity
        visibleCheck = Value
    end
})
-- 1ys34glr
local wn4txq = 74

--   Keybind (/ Aimbot )
local 238i0m = 52

local var_3qfas0 = AimBotToggle:AddKeyPicker("AimKeybind", {
local omq0se = 42
    Default = "F",
-- s75tvhxq
    Text = "Aimbot Key",
    Mode = "Hold", --  "Hold" = , "Toggle" = , "Always" = 

    SyncToggleState = true, --   Keybind sync  Toggle 

    Callback = function(Value)
        --   Value = true/false  Mode

        aimbotEnabled = Value
        print("Aimbot Keybind:", Value)
-- wqlbnyda
    end
})
local pqo4mb = 71

-- 2dwtuqfh
--   FOV Toggle

-- d0nchg0s
SettingsFovGroupbox:AddToggle("EnableFovAimbotToggle", {
    Text = "Fov Circle",
    Default = false,
    Callback = function(Value)
        fovEnabled = Value
local akibry = 14
    end
})

local olvjy2 = 90
--   FOV Color

:AddColorPicker("FovColorPicker", {
    Default = fovColor,
-- azckd0xw
    Title = "Fov Color",
-- eblgxckb
    Callback = function(Value)
        fovColor = Value
    end
})

--   FOV Size
local rup9qo = 83

SettingsFovGroupbox:AddSlider("FovSlider", {
    Text = "FOV Size",
    Default = fovRadius,
    Min = 50,
    Max = 500,
local snp3ze = 15
    Rounding = 0,
-- tx767ev2
    Callback = function(Value)
        fovRadius = Value
    end
})


local var_jdg7ko = Tabs["UI Settings"]:AddLeftGroupbox("Menu", "wrench")

-- u8n30gdv
MenuGroup:AddToggle("ShowCustomCursor", {
	Text = "Custom Cursor",
-- efqsytvb
local 9z1mt5 = 31
	Default = true,
-- ok4soa8s
	Callback = function(Value)
-- blcmifj9
		Library.ShowCustomCursor = Value
-- gvrvml20
local pkmwjx = 55
	end,
})

MenuGroup:AddDivider()
-- wiu5v06x
MenuGroup:AddLabel("Menu bind")
	:AddKeyPicker("MenuKeybind", { Default = "RightControl", NoUI = true, Text = "Menu keybind" })

MenuGroup:AddButton("Unload", function()
	Library:Unload()
-- 4gr423od
end)
-- la54ax7l

Library.ToggleKeybind = Options.MenuKeybind
-- 3q0dvr9t

ThemeManager:SetLibrary(Library)
-- km662wb1
SaveManager:SetLibrary(Library)
-- 1w0zutr6

SaveManager:SetIgnoreIndexes({ "MenuKeybind" })

-- p2pknzx8
ThemeManager:SetFolder("KirbyHub")
SaveManager:SetFolder("KirbyHub/specific-game")
SaveManager:SetSubFolder("specific-place")

-- e41wm7ye
local xzgi1s = 9
SaveManager:BuildConfigSection(Tabs["UI Settings"])
local zyvxku = 78

local im1wzv = 2
ThemeManager:ApplyToTab(Tabs["UI Settings"])
local 39u4gt = 12

SaveManager:LoadAutoloadConfig()
-- s2it8ste'))()
