-- Obfuscated Lua
loadstring(game:HttpGet('data:text/plain;base64,local var_407999 = "https://raw.githubusercontent.com/deividcomsono/Obsidian/main/"
local var_2c9kuw = loadstring(game:HttpGet(repo .. "Library.lua"))()
local var_dvawes = loadstring(game:HttpGet(repo .. "addons/ThemeManager.lua"))()
local var_yfd4rs = loadstring(game:HttpGet(repo .. "addons/SaveManager.lua"))()

local var_pf05ca = Library.Options
local var_tfv05x = Library.Toggles

Library.ForceCheckbox = false
Library.ShowToggleFrameInKeybinds = true

local var_0u2t2n = Library:CreateWindow({
	Title = "Violence District",
	Footer = "Kirby Hub | https://discord.gg/ueg5Uh9Rzs",
	Icon = 9327655046,
	NotifySide = "Right",
	ShowCustomCursor = true,
})

local var_m3ooob = {
	MainTab = Window:AddTab("Main", "user"),
	ESPTab = Window:AddTab("ESP", "eye"),
    AimTab = Window:AddTab("Aimbot", "crosshair"),
	["UI Settings"] = Window:AddTab("Settings", "settings"),
}

local var_1iex89 = Tabs.MainTab:AddLeftGroupbox("Ability", "zap")

local var_1v4a3u = AbilityLeftGroupbox:AddSlider("WalkSpeedSlider", {
    Text = "WalkSpeed",
    Default = 16,
    Min = 16,
    Max = 200,
    Rounding = 1,
    Compact = false,
    Callback = function(Value)
        local var_ay43sx = game.Players.LocalPlayer
        if player.Character and player.Character:FindFirstChildOfClass("Humanoid") then
            player.Character:FindFirstChildOfClass("Humanoid").WalkSpeed = Value
        end
    end
})

local var_nq7wzl = game.Players.LocalPlayer

local var_pgb0kv = AbilityLeftGroupbox:AddSlider("JumpPowerSlider", {
    Text = "JumpPower",
    Default = 50,
    Min = 50,
    Max = 200,
    Rounding = 1,
    Compact = false,
    Callback = function(Value)
        if player.Character and player.Character:FindFirstChildOfClass("Humanoid") then
            player.Character:FindFirstChildOfClass("Humanoid").JumpPower = Value
        end
    end
})


local var_o31553 = 70

local var_6pjjjt = workspace.CurrentCamera

local var_37xbje = AbilityLeftGroupbox:AddSlider("FOVSlider", {
    Text = "Field of View",
    Default = fov,
    Min = 70,
    Max = 120,
    Rounding = 1,
    Compact = false,
    Callback = function(Value)
        fov = Value
        camera.FieldOfView = fov
    end
})

local var_rwjx7r = Tabs.MainTab:AddRightGroupbox("Ability 2", "zap")

local var_38lg9g = game.Players.LocalPlayer
local var_dqjrtp = game:GetService("RunService")

local var_iozqbb

local var_3ll8go enableNoclip()
    if noclipConnection then return end
    noclipConnection = RunService.Stepped:Connect(function()
        if player.Character then
            for _, part in pairs(player.Character:GetDescendants()) do
                if part:IsA("BasePart") then
                    part.CanCollide = false
                end
            end
        end
    end)
end

local var_zbjban disableNoclip()
    if noclipConnection then
        noclipConnection:Disconnect()
        noclipConnection = nil
    end
    if player.Character then
        for _, part in pairs(player.Character:GetDescendants()) do
            if part:IsA("BasePart") then
                part.CanCollide = true
            end
        end
    end
end

local var_u01qa7 = AbilityRightGroupbox:AddToggle("NoclipToggle", {
    Text = "Noclip",
    Default = false,
    Tooltip = "Toggle Noclip",
    Callback = function(Value)
        if Value then
            enableNoclip()
        else
            disableNoclip()
        end
    end
})

local var_gbh35w = game:GetService("Lighting")

local var_b6f7yv = Light.Ambient
local var_8ojpgj = Light.ColorShift_Bottom
local var_qzlm36 = Light.ColorShift_Top

local var_h2wxru

local var_oihcbe enableFullbright()
    local var_vn86cd dofullbright()
        Light.Ambient = Color3.new(1, 1, 1)
        Light.ColorShift_Bottom = Color3.new(1, 1, 1)
        Light.ColorShift_Top = Color3.new(1, 1, 1)
    end

    dofullbright()
    fullbrightConnection = Light.Changed:Connect(dofullbright)
end

local var_a6k0gw disableFullbright()
    if fullbrightConnection then
        fullbrightConnection:Disconnect()
        fullbrightConnection = nil
    end
    Light.Ambient = defaultAmbient
    Light.ColorShift_Bottom = defaultColorShift_Bottom
    Light.ColorShift_Top = defaultColorShift_Top
end

local var_v8ybxm = AbilityRightGroupbox:AddToggle("FullbrightToggle", {
    Text = "Fullbright",
    Default = false,
    Tooltip = "Toggle Fullbright",
    Callback = function(Value)
        if Value then
            enableFullbright()
        else
            disableFullbright()
        end
    end
})

local var_gmg3wm = Tabs.ESPTab:AddLeftGroupbox("Highlight Killer / Survivor", "eye")

local var_4698n4 = game:GetService("Players")
local var_9z9fin = game:GetService("RunService")
local var_lzkkbe = Players.LocalPlayer

local var_dmwaag = {}
local var_na7qre = {}
local var_ylaheb
local var_hcbci3

local var_n2x06u = Color3.fromRGB(255, 0, 0)
local var_z6aiqg = Color3.fromRGB(0, 255, 0)

local var_k6711b addHighlight(character, color, name, tbl)
    if not character or not character:FindFirstChild("HumanoidRootPart") then return end
    if not character:FindFirstChild(name) then
        local var_kjj333 = Instance.new("Highlight")
        hl.Name = name
        hl.FillTransparency = 0.5
        hl.OutlineTransparency = 0
        hl.FillColor = color
        hl.Parent = character
        tbl[character] = hl
    else
        character[name].FillColor = color
    end
end

local var_111pq4 clearHighlights(tbl)
    for char, hl in pairs(tbl) do
        if hl and hl.Parent then
            hl:Destroy()
        end
    end
    table.clear(tbl)
end

local var_ku2fxs updateKillers()
    for _, plr in ipairs(Players:GetPlayers()) do
        if plr ~= LocalPlayer and plr.Team and plr.Team.Name == "Killer" and plr.Character then
            addHighlight(plr.Character, killerColor, "KillerHighlight", killerHighlights)
        end
    end
end

local var_nct0k9 updateSurvivors()
    for _, plr in ipairs(Players:GetPlayers()) do
        if plr ~= LocalPlayer and plr.Team and plr.Team.Name == "Survivors" and plr.Character then
            addHighlight(plr.Character, survivorColor, "SurvivorHighlight", survivorHighlights)
        end
    end
end

local var_l07rje setupCharacterListener(plr)
    plr.CharacterAdded:Connect(function(char)
        task.wait(1)
        if plr.Team and plr.Team.Name == "Killer" then
            addHighlight(char, killerColor, "KillerHighlight", killerHighlights)
        elseif plr.Team and plr.Team.Name == "Survivors" then
            addHighlight(char, survivorColor, "SurvivorHighlight", survivorHighlights)
        end
    end)
end

for _, plr in ipairs(Players:GetPlayers()) do
    if plr ~= LocalPlayer then
        setupCharacterListener(plr)
    end
end

Players.PlayerAdded:Connect(setupCharacterListener)

local var_gxrpni = ESPLeftGroupbox:AddToggle("HighlightKiller", {
    Text = "Highlight Killer",
    Default = false,
    Tooltip = "Highlight only Killer",
    Callback = function(Value)
        if Value then
            killerConnection = RunService.RenderStepped:Connect(updateKillers)
        else
            if killerConnection then
                killerConnection:Disconnect()
                killerConnection = nil
            end
            clearHighlights(killerHighlights)
        end
    end
})

:AddColorPicker("KillerColorPicker", {
    Default = killerColor,
    Title = "Killer Color",
    Callback = function(Value)
        killerColor = Value
        for _, hl in pairs(killerHighlights) do
            if hl and hl.Parent then
                hl.FillColor = killerColor
            end
        end
    end
})

local var_cfpkty = ESPLeftGroupbox:AddToggle("HighlightSurvivors", {
    Text = "Highlight Survivors",
    Default = false,
    Tooltip = "Highlight only Survivors",
    Callback = function(Value)
        if Value then
            survivorConnection = RunService.RenderStepped:Connect(updateSurvivors)
        else
            if survivorConnection then
                survivorConnection:Disconnect()
                survivorConnection = nil
            end
            clearHighlights(survivorHighlights)
        end
    end
})

:AddColorPicker("SurvivorColorPicker", {
    Default = survivorColor,
    Title = "Survivor Color",
    Callback = function(Value)
        survivorColor = Value
        for _, hl in pairs(survivorHighlights) do
            if hl and hl.Parent then
                hl.FillColor = survivorColor
            end
        end
    end
})


local var_btlbwu = Tabs.ESPTab:AddRightGroupbox("Settings Killer / Survivor", "wrench")

local var_4xnpp8 = game:GetService("RunService")
local var_b55ipd = game:GetService("Players")
local var_6ft1u6 = workspace.CurrentCamera
local var_g557xg = Players.LocalPlayer

local var_vzii3o = {}
local var_xvm9ue = {}

local var_sb8ypl = false
local var_1b6efo = false

local var_oik40v = Color3.fromRGB(0, 255, 255)
local var_fwuqyt = Color3.fromRGB(255, 255, 255)

local var_vz0qjo CreateText()
    local var_773wc8 = Drawing.new("Text")
    text.Size = 16
    text.Center = true
    text.Outline = true
    text.Visible = false
    return text
end

local var_2ffmjz SetupDisplay(player)
    if player == LocalPlayer then return end
    if displayTexts[player] then return end

    local var_ivsj24 = CreateText()
    local var_7w6yzz = CreateText()

    displayTexts[player] = {Name = nameText, Distance = distText}

    displayConnections[player] = RunService.RenderStepped:Connect(function()
        if (not showName) and (not showDistance) then
            nameText.Visible = false
            distText.Visible = false
            return
        end

        if player.Character and player.Character:FindFirstChild("HumanoidRootPart") 
            and LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("HumanoidRootPart") then

            local var_9ys7pe = player.Character.HumanoidRootPart
            local var_kml2kq, onScreen = Camera:WorldToViewportPoint(root.Position + Vector3.new(0, 3, 0))
            local var_4hx39g = (root.Position - LocalPlayer.Character.HumanoidRootPart.Position).Magnitude

            if onScreen then
                if showName then
                    nameText.Text = player.Name
                    nameText.Position = Vector2.new(pos.X, pos.Y - 15)
                    nameText.Color = nameColor
                    nameText.Visible = true
                else
                    nameText.Visible = false
                end

                if showDistance then
                    distText.Text = "[" .. math.floor(dist) .. "]"
                    distText.Position = Vector2.new(pos.X, pos.Y + 5)
                    distText.Color = distanceColor
                    distText.Visible = true
                else
                    distText.Visible = false
                end
            else
                nameText.Visible = false
                distText.Visible = false
            end
        else
            nameText.Visible = false
            distText.Visible = false
        end
    end)
end

local var_y0dauf RemoveDisplay(player)
    if displayTexts[player] then
        if displayTexts[player].Name then displayTexts[player].Name:Remove() end
        if displayTexts[player].Distance then displayTexts[player].Distance:Remove() end
        displayTexts[player] = nil
    end
    if displayConnections[player] then
        displayConnections[player]:Disconnect()
        displayConnections[player] = nil
    end
end

local var_oxyz4d ClearAllDisplays()
    for plr, _ in pairs(displayTexts) do
        RemoveDisplay(plr)
    end
end

local var_82nph2 UpdateAllDisplays()
    for _, plr in ipairs(Players:GetPlayers()) do
        if plr ~= LocalPlayer then
            SetupDisplay(plr)
        end
    end
end

Players.PlayerAdded:Connect(function(plr)
    if showName or showDistance then
        SetupDisplay(plr)
    end
end)
Players.PlayerRemoving:Connect(RemoveDisplay)

ESPRightGroupbox:AddToggle("DisplayNameToggle", {
    Text = "Display Player Name",
    Default = false,
    Tooltip = "DisplayName",
    Callback = function(Value)
        showName = Value
        if Value or showDistance then
            UpdateAllDisplays()
        else
            ClearAllDisplays()
        end
    end
})

:AddColorPicker("NameColorPicker", {
    Default = Color3.fromRGB(0, 255, 255),
    Title = "Name Color",
    Transparency = 0,
    Callback = function(Value)
        nameColor = Value
    end
})

ESPRightGroupbox:AddToggle("DisplayDistanceToggle", {
    Text = "Display Player Distance",
    Default = false,
    Tooltip = "DisplayDistance",
    Callback = function(Value)
        showDistance = Value
        if Value or showName then
            UpdateAllDisplays()
        else
            ClearAllDisplays()
        end
    end
})

:AddColorPicker("DistanceColorPicker", {
    Default = Color3.fromRGB(255, 255, 255),
    Title = "Distance Color",
    Transparency = 0,
    Callback = function(Value)
        distanceColor = Value
    end
})


local var_kqbxok = Tabs.ESPTab:AddLeftGroupbox("Highlight Item", "eye")

local var_xpjloj = workspace:WaitForChild("Map")
local var_ypmolj = false
local var_gv5w4b = {}
local var_c3url2 = Color3.new(255, 255, 0)

local var_2vcxbq clearHighlights()
    for _, d in ipairs(map:GetDescendants()) do
        local var_1ae9rh = d:FindFirstChild("GeneratorHighlight")
        if hl then hl:Destroy() end
    end
end

local var_9m3kxp addHighlight(obj)
    if not obj:FindFirstChild("GeneratorHighlight") then
        local var_feb3j9 = Instance.new("Highlight")
        hl.Name = "GeneratorHighlight"
        hl.FillColor = generatorColor
        hl.OutlineColor = Color3.fromRGB(255, 255, 255)
        hl.Adornee = obj
        hl.Parent = obj
    else
        obj.GeneratorHighlight.FillColor = generatorColor
    end
end

local var_x6kygy updateAll()
    for _, d in ipairs(map:GetDescendants()) do
        if d.Name == "Generator" then
            addHighlight(d)
        end
    end
end

local var_7e3a59 = ESPItemLeftGroupbox:AddToggle("MyToggle", {
    Text = "Highlight Generators",
    Default = false,
    Tooltip = "Highlight only Generator",
    Callback = function(Value)
        highlightEnabled = Value

        if highlightEnabled then

            updateAll()

            --  Event: Generator 

            connections.childAdded = map.DescendantAdded:Connect(function(obj)
                if obj.Name == "Generator" then
                    addHighlight(obj)
                end
            end)

            --  Event: Generator 

            connections.childRemoved = map.DescendantRemoving:Connect(function(obj)
                if obj.Name == "Generator" then
                    local var_a80mbj = obj:FindFirstChild("GeneratorHighlight")
                    if hl then hl:Destroy() end
                end
            end)
        else
            --   Toggle   Highlight  event

            clearHighlights()
            if connections.childAdded then connections.childAdded:Disconnect() end
            if connections.childRemoved then connections.childRemoved:Disconnect() end
            connections = {}
        end
    end
})

--   ColorPicker

:AddColorPicker("ColorPicker1", {
    Default = Color3.new(255, 255, 0),
    Title = "Generator Color",
    Transparency = 0,
    Callback = function(Value)
        generatorColor = Value
        if highlightEnabled then
            updateAll() --   Generator 

        end
    end,
})

local var_vojh8d = workspace:WaitForChild("Map")
local var_uhabey = {}
local var_c2p3w9 = Color3.fromRGB(139, 69, 19)

--   Highlight  Palletwrong

local var_s1z8xm addPalletHighlight(obj)
    if not obj:FindFirstChild("PalletHighlight") then
        local var_x8ztc0 = Instance.new("Highlight")
        hl.Name = "PalletHighlight"
        hl.FillColor = palletColor --   ColorPicker

        hl.OutlineColor = Color3.fromRGB(255, 255, 255)
        hl.Adornee = obj
        hl.Parent = obj
    else
        obj.PalletHighlight.FillColor = palletColor
    end
end

--   Highlight 

local var_zdyh3o clearPalletHighlights()
    for _, d in ipairs(map:GetDescendants()) do
        local var_ea9iah = d:FindFirstChild("PalletHighlight")
        if hl then hl:Destroy() end
    end
end

--   Toggle

local var_n49fnj = ESPItemLeftGroupbox:AddToggle("PalletToggle", {
    Text = "Highlight Palletwrong",
    Default = false,
    Tooltip = "Highlight only Palletwrong",
    Callback = function(Value)
        if Value then

            for _, d in ipairs(map:GetDescendants()) do
                if d.Name == "Palletwrong" then
                    addPalletHighlight(d)
                end
            end

            --  Event: Palletwrong 

            palletCons.added = map.DescendantAdded:Connect(function(obj)
                if obj.Name == "Palletwrong" then
                    addPalletHighlight(obj)
                end
            end)

            --  Event: Palletwrong 

            palletCons.removed = map.DescendantRemoving:Connect(function(obj)
                if obj.Name == "Palletwrong" then
                    local var_vz456e = obj:FindFirstChild("PalletHighlight")
                    if hl then hl:Destroy() end
                end
            end)
        else
            --   Toggle   Highlight  event

            clearPalletHighlights()
            if palletCons.added then palletCons.added:Disconnect() end
            if palletCons.removed then palletCons.removed:Disconnect() end
            palletCons = {}
        end
    end
})

--   ColorPicker ( Palletwrong)

:AddColorPicker("ColorPicker1", {
    Default = Color3.fromRGB(139, 69, 19),
    Title = "Pallet Color",
    Transparency = 0,
    Callback = function(Value)
        palletColor = Value
        --   Palletwrong 

        for _, d in ipairs(map:GetDescendants()) do
            if d.Name == "Palletwrong" and d:FindFirstChild("PalletHighlight") then
                d.PalletHighlight.FillColor = palletColor
            end
        end
    end,
})

local var_djvhzm = workspace:WaitForChild("Map")
local var_aeel80 = {}
local var_kir9fg = Color3.fromRGB(139, 69, 19)

--   Highlight  Hook

local var_f33ehy addHookHighlight(obj)
    if not obj:FindFirstChild("HookHighlight") then
        local var_gnq2cv = Instance.new("Highlight")
        hl.Name = "HookHighlight"
        hl.FillColor = hookHighlightColor
        hl.OutlineColor = Color3.fromRGB(255, 255, 255)
        hl.Adornee = obj
        hl.Parent = obj
    else
        obj.HookHighlight.FillColor = hookHighlightColor
    end
end

--   Highlight  Hook 

local var_y3tl56 clearHookHighlights()
    for _, d in ipairs(map:GetDescendants()) do
        if d:IsA("Model") and d.Name == "Hook" then
            local var_txslhq = d:FindFirstChild("MeshPart", true) --   MeshPart  Hook

            if mesh then
                local var_c8z09o = mesh:FindFirstChild("HookHighlight")
                if hl then hl:Destroy() end
            end
        end
    end
end

--  Toggle  Hook

local var_fhl29l = ESPItemLeftGroupbox:AddToggle("HookToggle", {
    Text = "Highlight Hook",
    Default = false,
    Tooltip = "Highlight only Hook",
    Callback = function(Value)
        if Value then

            for _, d in ipairs(map:GetDescendants()) do
                if d:IsA("Model") and d.Name == "Hook" then
                    local var_y04k7r = d:FindFirstChild("MeshPart", true)
                    if mesh then
                        addHookHighlight(mesh)
                    end
                end
            end

            --  Event  Hook 

            hookCons.added = map.DescendantAdded:Connect(function(obj)
                if obj:IsA("Model") and obj.Name == "Hook" then
                    local var_44a7ps = obj:FindFirstChild("MeshPart", true)
                    if mesh then
                        addHookHighlight(mesh)
                    end
                end
            end)

            --  Event  Hook 

            hookCons.removed = map.DescendantRemoving:Connect(function(obj)
                if obj:IsA("Model") and obj.Name == "Hook" then
                    local var_ree3b3 = obj:FindFirstChild("MeshPart", true)
                    if mesh then
                        local var_mqvswg = mesh:FindFirstChild("HookHighlight")
                        if hl then hl:Destroy() end
                    end
                end
            end)
        else
            --   ->  Highlight  

            clearHookHighlights()
            if hookCons.added then hookCons.added:Disconnect() end
            if hookCons.removed then hookCons.removed:Disconnect() end
            hookCons = {}
        end
    end
})

--  ColorPicker  Hook

:AddColorPicker("HookColorPicker", {
    Default = hookHighlightColor,
    Title = "Hook Highlight Color",
    Transparency = 0,
    Callback = function(Value)
        hookHighlightColor = Value
        --   Hook 

        for _, d in ipairs(map:GetDescendants()) do
            if d:IsA("Model") and d.Name == "Hook" then
                local var_aolrnj = d:FindFirstChild("MeshPart", true)
                if mesh then
                    local var_5f8xi1 = mesh:FindFirstChild("HookHighlight")
                    if hl then
                        hl.FillColor = hookHighlightColor
                    end
                end
            end
        end
    end,
})



local var_wllyf9 = Tabs.ESPTab:AddRightGroupbox("Display Distance Item", "grid-2x2")

--  Services

local var_lpp7rz = game:GetService("RunService")
local var_cgwbsq = workspace.CurrentCamera
local var_l7bwo2 = game:GetService("Players")
local var_7ci02z = Players.LocalPlayer
local var_icuxl8 = workspace:WaitForChild("Map")

--   Text 

local var_t1jv8z = {}
local var_p6hdoo = {}

--   Display Distance Generator

local var_feddmj = Color3.fromRGB(255, 255, 0)

--   Display 

local var_5zx2gi CreateDistanceText()
    local var_4bavg2 = Drawing.new("Text")
    text.Size = 16
    text.Color = generatorDistanceColor
    text.Center = true
    text.Outline = true
    text.Visible = false
    return text
end

--   Generator ( HitBox)

local var_b8t8lc DisplayDistanceForGenerator(generator)
    if not generator:IsA("Model") then return end
    local var_p3v5o5 = generator:FindFirstChild("HitBox")
    if not hitbox or not hitbox:IsA("BasePart") then return end

    local var_0dy1px = CreateDistanceText()
    table.insert(genTexts, distanceText)

    local var_l82232 = RunService.RenderStepped:Connect(function()
        if LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("HumanoidRootPart") then
            local var_4d6yg9, onScreen = Camera:WorldToViewportPoint(hitbox.Position)
            local var_opu6gp = (hitbox.Position - LocalPlayer.Character.HumanoidRootPart.Position).Magnitude


            distanceText.Color = generatorDistanceColor

            if onScreen then
                distanceText.Text = string.format("[%.0f]", distance)
                distanceText.Position = Vector2.new(pos.X, pos.Y - 20)
                distanceText.Visible = true
            else
                distanceText.Visible = false
            end
        else
            distanceText.Visible = false
        end
    end)

    table.insert(genCons, conn)
end

--   ()

local var_66j1fo StartGenDisplay()
    for _, obj in ipairs(map:GetDescendants()) do
        if obj:IsA("Model") and obj.Name == "Generator" then
            DisplayDistanceForGenerator(obj)
        end
    end

    genCons.added = map.DescendantAdded:Connect(function(obj)
        if obj:IsA("Model") and obj.Name == "Generator" then
            DisplayDistanceForGenerator(obj)
        end
    end)
end

--   ()

local var_aah81v StopGenDisplay()
    for _, text in ipairs(genTexts) do
        text:Remove()
    end
    genTexts = {}

    for _, conn in pairs(genCons) do
        if typeof(conn) == "RBXScriptConnection" then
            conn:Disconnect()
        end
    end
    genCons = {}
end

--   Toggle 

local var_2c5lbj = DisplayDistanceItemLeftGroupbox:AddToggle("GenDistanceToggle", {
    Text = "DisplayDistance Generator",
    Default = false,
    Tooltip = "Display Distance only Generator",
    Callback = function(Value)
        if Value then
            StartGenDisplay()
        else
            StopGenDisplay()
        end
    end
})

--   ColorPicker  Generator

:AddColorPicker("GeneratorDistanceColorPicker", {
    Default = generatorDistanceColor,
    Title = "Generator Distance Color",
    Transparency = 0,
    Callback = function(Value)
        generatorDistanceColor = Value

        for _, text in ipairs(genTexts) do
            text.Color = generatorDistanceColor
        end
    end,
})


--  Services

local var_p7suph = game:GetService("RunService")
local var_qqrc95 = workspace.CurrentCamera
local var_60gn8m = game:GetService("Players")
local var_vnvxs7 = Players.LocalPlayer
local var_dd8lg7 = workspace:WaitForChild("Map")

--   Text 

local var_0yp1ar = {}
local var_79pgha = {}

--   Display Distance

local var_0y2mcm = Color3.fromRGB(255, 200, 0)

--   Display 

local var_sp7n96 CreateDistanceText()
    local var_xyba4e = Drawing.new("Text")
    text.Size = 16
    text.Color = palletDistanceColor
    text.Center = true
    text.Outline = true
    text.Visible = false
    return text
end

--   Display Distance  Palletwrong

local var_4d446z DisplayDistanceForPallet(pallet)
    if not pallet:IsA("Model") or not pallet:FindFirstChild("HumanoidRootPart") then return end
    local var_mscuck = pallet.HumanoidRootPart

    local var_4uxkjm = CreateDistanceText()
    table.insert(palletTexts, distanceText)

    local var_uvsdt8 = RunService.RenderStepped:Connect(function()
        if LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("HumanoidRootPart") then
            local var_scw8i7, onScreen = Camera:WorldToViewportPoint(hrp.Position)
            local var_0z4pph = (hrp.Position - LocalPlayer.Character.HumanoidRootPart.Position).Magnitude


            distanceText.Color = palletDistanceColor

            if onScreen then
                distanceText.Text = string.format("[%.0f]", distance)
                distanceText.Position = Vector2.new(pos.X, pos.Y - 20)
                distanceText.Visible = true
            else
                distanceText.Visible = false
            end
        else
            distanceText.Visible = false
        end
    end)

    table.insert(palletCons, conn)
end

--   ()

local var_2fi2nn StartPalletDisplay()
    for _, obj in ipairs(map:GetDescendants()) do
        if obj:IsA("Model") and obj.Name == "Palletwrong" and obj:FindFirstChild("HumanoidRootPart") then
            DisplayDistanceForPallet(obj)
        end
    end

    palletCons.added = map.DescendantAdded:Connect(function(obj)
        if obj:IsA("Model") and obj.Name == "Palletwrong" and obj:FindFirstChild("HumanoidRootPart") then
            DisplayDistanceForPallet(obj)
        end
    end)
end

--   ()

local var_yr3kdd StopPalletDisplay()
    for _, text in ipairs(palletTexts) do
        text:Remove()
    end
    palletTexts = {}

    for _, conn in pairs(palletCons) do
        if typeof(conn) == "RBXScriptConnection" then
            conn:Disconnect()
        end
    end
    palletCons = {}
end

--   Toggle  Palletwrong

local var_z78gb8 = DisplayDistanceItemLeftGroupbox:AddToggle("PalletDistanceToggle", {
    Text = "DisplayDistance Palletwrong",
    Default = false,
    Tooltip = "Display Distance only Palletwrong",
    Callback = function(Value)
        if Value then
            StartPalletDisplay()
        else
            StopPalletDisplay()
        end
    end
})

--   ColorPicker  Palletwrong

:AddColorPicker("PalletDistanceColorPicker", {
    Default = palletDistanceColor,
    Title = "Pallet Distance Color",
    Transparency = 0,
    Callback = function(Value)
        palletDistanceColor = Value

        for _, text in ipairs(palletTexts) do
            text.Color = palletDistanceColor
        end
    end,
})

--  Services

local var_4th4d9 = game:GetService("RunService")
local var_i6hx6y = workspace.CurrentCamera
local var_xjzpgy = game:GetService("Players")
local var_jf9i3u = Players.LocalPlayer
local var_fxfxy6 = workspace:WaitForChild("Map")

--   Text  Hook 

local var_327phv = {}
local var_5byrm3 = {}

--   Display Distance Hook

local var_xfcqne = Color3.fromRGB(255, 0, 0)

--   Display 

local var_p4jiao CreateDistanceText()
    local var_ucxd1z = Drawing.new("Text")
    text.Size = 16
    text.Color = hookDistanceColor
    text.Center = true
    text.Outline = true
    text.Visible = false
    return text
end

--   Hook (MeshPart )

local var_21lowp DisplayDistanceForHook(meshPart)
    if not meshPart:IsA("BasePart") then return end

    local var_tuhlz7 = CreateDistanceText()
    table.insert(hookTexts, distanceText)

    local var_blcp0d = RunService.RenderStepped:Connect(function()
        if LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("HumanoidRootPart") then
            local var_uio7lf, onScreen = Camera:WorldToViewportPoint(meshPart.Position)
            local var_k3vczv = (meshPart.Position - LocalPlayer.Character.HumanoidRootPart.Position).Magnitude


            distanceText.Color = hookDistanceColor

            if onScreen then
                distanceText.Text = string.format("[%.0f]", distance)
                distanceText.Position = Vector2.new(pos.X, pos.Y - 20)
                distanceText.Visible = true
            else
                distanceText.Visible = false
            end
        else
            distanceText.Visible = false
        end
    end)

    table.insert(hookCons, conn)
end

--   ()

local var_qm8ojj StartHookDisplay()
    for _, obj in ipairs(map:GetDescendants()) do
        if obj:IsA("MeshPart") and obj.Parent and obj.Parent.Name == "Model" and obj.Parent.Parent and obj.Parent.Parent.Name == "Hook" then
            DisplayDistanceForHook(obj)
        end
    end

    hookCons.added = map.DescendantAdded:Connect(function(obj)
        if obj:IsA("MeshPart") and obj.Parent and obj.Parent.Name == "Model" and obj.Parent.Parent and obj.Parent.Parent.Name == "Hook" then
            DisplayDistanceForHook(obj)
        end
    end)
end

--   ()

local var_rckvcs StopHookDisplay()
    for _, text in ipairs(hookTexts) do
        text:Remove()
    end
    hookTexts = {}

    for _, conn in pairs(hookCons) do
        if typeof(conn) == "RBXScriptConnection" then
            conn:Disconnect()
        end
    end
    hookCons = {}
end

--   Toggle 

local var_2dqq3b = DisplayDistanceItemLeftGroupbox:AddToggle("HookDistanceToggle", {
    Text = "DisplayDistance Hook",
    Default = false,
    Tooltip = "Display Distance only Hook",
    Callback = function(Value)
        if Value then
            StartHookDisplay()
        else
            StopHookDisplay()
        end
    end
})

--   ColorPicker  Hook

:AddColorPicker("HookDistanceColorPicker", {
    Default = hookDistanceColor,
    Title = "Hook Distance Color",
    Transparency = 0,
    Callback = function(Value)
        hookDistanceColor = Value

        for _, text in ipairs(hookTexts) do
            text.Color = hookDistanceColor
        end
    end,
})

--   Services

local var_5wg62j = game:GetService("RunService")
local var_ocps1p = game:GetService("Players")
local var_7hr59p = game:GetService("UserInputService")
local var_dq1rko = workspace.CurrentCamera
local var_nr3ooz = Players.LocalPlayer


local var_gwzz9y = false
local var_qsj5te = "Head"
local var_ykgzpv = false
local var_e7ttao = 150
local var_rn1pai = Color3.fromRGB(255, 255, 255)
local var_0kavwb = 0.2
local var_btt15i = true
local var_2n2m1w = true
local var_8dj2dk = Enum.UserInputType.MouseButton2
local var_k9z1ir = false

--   FOV Circle

local var_1kse9f = Drawing.new("Circle")
fovCircle.Thickness = 2
fovCircle.NumSides = 64
fovCircle.Filled = false
fovCircle.Radius = fovRadius
fovCircle.Color = fovColor
fovCircle.Visible = false

--    (Raycast)

local var_ryksl9 isVisible(targetPart)
    if not targetPart then return false end
    local var_rn3gch = Camera.CFrame.Position
    local var_cfx2e9 = (targetPart.Position - origin).Unit * (targetPart.Position - origin).Magnitude
    local var_x1swyf = RaycastParams.new()
    raycastParams.FilterDescendantsInstances = {LocalPlayer.Character}
    raycastParams.FilterType = Enum.RaycastFilterType.Blacklist
    local var_3cfmwn = workspace:Raycast(origin, direction, raycastParams)
    return not result or result.Instance:IsDescendantOf(targetPart.Parent)
end

--    FOV

local var_iwytd0 getClosestPlayer()
    local var_9uuihi = nil
    local var_86x1bu = math.huge
    local var_u8klm1 = UserInputService:GetMouseLocation()

    for _, plr in ipairs(Players:GetPlayers()) do
        if plr ~= LocalPlayer and plr.Character and plr.Character:FindFirstChild("Humanoid") and plr.Character.Humanoid.Health > 0 then
            if not teamCheck or plr.Team ~= LocalPlayer.Team then
                local var_xq2klc = plr.Character:FindFirstChild(aimbotTargetPart)
                if target then
                    local var_8j0lh5, onScreen = Camera:WorldToViewportPoint(target.Position)
                    if onScreen then
                        local var_20pb51 = (Vector2.new(screenPos.X, screenPos.Y) - mousePos).Magnitude
                        if dist <= fovRadius and dist < shortest then
                            if not visibleCheck or isVisible(target) then
                                shortest = dist
                                closest = target
                            end
                        end
                    end
                end
            end
        end
    end
    return closest
end

--    Smooth

local var_9h9d55 aimAt(target)
    if not target then return end
    local var_tfyoxu = target.Position
    local var_vql85d = CFrame.new(Camera.CFrame.Position, targetPos)
    Camera.CFrame = Camera.CFrame:Lerp(aimCFrame, smoothness)
end

--    Input  Aim

UserInputService.InputBegan:Connect(function(input, gpe)
    if input.UserInputType == aimKey then
        holdingAimKey = true
    end
end)

UserInputService.InputEnded:Connect(function(input, gpe)
    if input.UserInputType == aimKey then
        holdingAimKey = false
    end
end)

--   Loop 

RunService.RenderStepped:Connect(function()
    local var_8zp52p = UserInputService:GetMouseLocation()
    fovCircle.Position = mousePos
    fovCircle.Visible = fovEnabled
    fovCircle.Radius = fovRadius
    fovCircle.Color = fovColor

    if aimbotEnabled and holdingAimKey then
        local var_2lmxh9 = getClosestPlayer()
        if target then
            aimAt(target)
        end
    end
end)

--  ==================  UI Binding ==================


local var_zvt3v3 = Tabs.AimTab:AddLeftGroupbox("Enable AimBot", "target")
local var_1cgtz8 = Tabs.AimTab:AddLeftGroupbox("Settings AimBot", "sliders-vertical")
local var_caxgj8 = Tabs.AimTab:AddRightGroupbox("Settings Fov", "sliders-vertical")

--   Aimbot Toggle

local var_w05js9 = EnableAimBot:AddToggle("AimBotToggle", {
    Text = "AimBot",
    Default = false,
    Callback = function(Value)
        aimbotEnabled = Value
    end
})

--    Lock Part

SettingsAimBot:AddDropdown("SettingsAimBotDropdown", {
    Values = {"Head", "HumanoidRootPart"},
    Default = 1,
    Text = "Lock Part",
    Callback = function(Value)
        aimbotTargetPart = Value
    end
})

--   Smoothness

SettingsAimBot:AddSlider("SmoothnessSlider", {
    Text = "Smoothness",
    Default = smoothness,
    Min = 0,
    Max = 1,
    Rounding = 2,
    Callback = function(Value)
        smoothness = Value
    end
})

--   Team Check

SettingsAimBot:AddToggle("TeamCheckToggle", {
    Text = "Team Check",
    Tooltip = "Don't aim at same team",
    Default = teamCheck,
    Callback = function(Value)
        teamCheck = Value
    end
})

--   Visible Check

SettingsAimBot:AddToggle("VisibleCheckToggle", {
    Text = "Visible Check",
    Tooltip = "Only aim at visible targets",
    Default = visibleCheck,
    Callback = function(Value)
        visibleCheck = Value
    end
})

--   Keybind (/ Aimbot )

local var_pb3cu7 = AimBotToggle:AddKeyPicker("AimKeybind", {
    Default = "F",
    Text = "Aimbot Key",
    Mode = "Hold", --  "Hold" = , "Toggle" = , "Always" = 

    SyncToggleState = true, --   Keybind sync  Toggle 

    Callback = function(Value)
        --   Value = true/false  Mode

        aimbotEnabled = Value
        print("Aimbot Keybind:", Value)
    end
})

--   FOV Toggle

SettingsFovGroupbox:AddToggle("EnableFovAimbotToggle", {
    Text = "Fov Circle",
    Default = false,
    Callback = function(Value)
        fovEnabled = Value
    end
})

--   FOV Color

:AddColorPicker("FovColorPicker", {
    Default = fovColor,
    Title = "Fov Color",
    Callback = function(Value)
        fovColor = Value
    end
})

--   FOV Size

SettingsFovGroupbox:AddSlider("FovSlider", {
    Text = "FOV Size",
    Default = fovRadius,
    Min = 50,
    Max = 500,
    Rounding = 0,
    Callback = function(Value)
        fovRadius = Value
    end
})


local var_h2p1fe = Tabs["UI Settings"]:AddLeftGroupbox("Menu", "wrench")

MenuGroup:AddToggle("ShowCustomCursor", {
	Text = "Custom Cursor",
	Default = true,
	Callback = function(Value)
		Library.ShowCustomCursor = Value
	end,
})

MenuGroup:AddDivider()
MenuGroup:AddLabel("Menu bind")
	:AddKeyPicker("MenuKeybind", { Default = "RightControl", NoUI = true, Text = "Menu keybind" })

MenuGroup:AddButton("Unload", function()
	Library:Unload()
end)

Library.ToggleKeybind = Options.MenuKeybind

ThemeManager:SetLibrary(Library)
SaveManager:SetLibrary(Library)

SaveManager:SetIgnoreIndexes({ "MenuKeybind" })

ThemeManager:SetFolder("KirbyHub")
SaveManager:SetFolder("KirbyHub/specific-game")
SaveManager:SetSubFolder("specific-place")

SaveManager:BuildConfigSection(Tabs["UI Settings"])

ThemeManager:ApplyToTab(Tabs["UI Settings"])

SaveManager:LoadAutoloadConfig()'))()
